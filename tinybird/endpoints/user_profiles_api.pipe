DESCRIPTION >
    API endpoint to get user profiles with first and last touch attribution data,
    merging anonymous and identified profiles for the same user

NODE get_user_profiles
SQL >
    %
    WITH 
        -- If we're looking up a specific user, get all their anonymous IDs
        user_mappings AS (
            {% if defined(distinct_id) %}
            SELECT 
                user_id,
                groupArray(anonymous_id) as anonymous_ids
            FROM identity_mappings 
            WHERE location_id = {{String(location_id, required=True)}}
            AND (user_id = {{String(distinct_id)}} OR anonymous_id = {{String(distinct_id)}})
            GROUP BY user_id
            {% else %}
            SELECT '' as user_id, [] as anonymous_ids WHERE 0=1
            {% end %}
        )
    
    SELECT 
        distinct_id AS user_id,
        location_id,
        
        -- First touch attribution
        minMerge(first_seen) AS first_seen,
        argMinMerge(first_url) AS first_url,
        argMinMerge(first_referrer) AS first_referrer,
        argMinMerge(first_referring_domain) AS first_referring_domain,
        argMinMerge(first_utm_source) AS first_utm_source,
        argMinMerge(first_utm_medium) AS first_utm_medium,
        argMinMerge(first_utm_campaign) AS first_utm_campaign,
        argMinMerge(first_utm_content) AS first_utm_content,
        argMinMerge(first_utm_term) AS first_utm_term,
        
        -- First click IDs
        argMinMerge(first_gclid) AS first_gclid,
        argMinMerge(first_fbclid) AS first_fbclid,
        argMinMerge(first_msclkid) AS first_msclkid,
        argMinMerge(first_twclid) AS first_twclid,
        argMinMerge(first_dclid) AS first_dclid,
        argMinMerge(first_gbraid) AS first_gbraid,
        argMinMerge(first_wbraid) AS first_wbraid,
        argMinMerge(first_li_fat_id) AS first_li_fat_id,
        argMinMerge(first_igshid) AS first_igshid,
        argMinMerge(first_ttclid) AS first_ttclid,
        argMinMerge(first_rdt_cid) AS first_rdt_cid,
        argMinMerge(first_epik) AS first_epik,
        argMinMerge(first_qclid) AS first_qclid,
        argMinMerge(first_sccid) AS first_sccid,
        argMinMerge(first_irclid) AS first_irclid,
        argMinMerge(first__kx) AS first__kx,
        
        -- Last touch attribution
        maxMerge(last_seen) AS last_seen,
        argMaxMerge(last_url) AS last_url, 
        argMaxMerge(last_referrer) AS last_referrer,
        argMaxMerge(last_referring_domain) AS last_referring_domain,
        argMaxMerge(last_utm_source) AS last_utm_source,
        argMaxMerge(last_utm_medium) AS last_utm_medium,
        argMaxMerge(last_utm_campaign) AS last_utm_campaign,
        argMaxMerge(last_utm_content) AS last_utm_content,
        argMaxMerge(last_utm_term) AS last_utm_term,
        
        -- Last click IDs
        argMaxMerge(last_gclid) AS last_gclid,
        argMaxMerge(last_fbclid) AS last_fbclid,
        argMaxMerge(last_msclkid) AS last_msclkid,
        argMaxMerge(last_twclid) AS last_twclid,
        argMaxMerge(last_dclid) AS last_dclid,
        argMaxMerge(last_gbraid) AS last_gbraid,
        argMaxMerge(last_wbraid) AS last_wbraid,
        argMaxMerge(last_li_fat_id) AS last_li_fat_id,
        argMaxMerge(last_igshid) AS last_igshid,
        argMaxMerge(last_ttclid) AS last_ttclid,
        argMaxMerge(last_rdt_cid) AS last_rdt_cid,
        argMaxMerge(last_epik) AS last_epik,
        argMaxMerge(last_qclid) AS last_qclid,
        argMaxMerge(last_sccid) AS last_sccid,
        argMaxMerge(last_irclid) AS last_irclid,
        argMaxMerge(last__kx) AS last__kx,
        
        -- Other profile data
        anyMerge(device_type) AS device_type,
        anyMerge(browser) AS browser,
        anyMerge(timezone) AS timezone,
        
        -- Identity status
        maxMerge(identity_mapped) = 1 AS has_identity_mapping,
        maxMerge(is_identified) = 1 AS is_identified
        
    FROM user_profiles_mv
    WHERE location_id = {{String(location_id, required=True)}}
    {% if defined(distinct_id) %}
    AND (
        distinct_id = {{String(distinct_id)}}
        OR distinct_id IN (
            SELECT arrayJoin(anonymous_ids) FROM user_mappings
        )
    )
    {% end %}
    {% if defined(is_identified) %}
    AND maxMerge(is_identified) = {{UInt8(is_identified)}}
    {% end %}
    GROUP BY distinct_id, location_id
    {% if not defined(distinct_id) %}
    ORDER BY last_seen DESC
    LIMIT {{Int32(limit, 100)}}
    {% end %}

TYPE endpoint